{"version":3,"sources":["assets/images/bg-start-o.jpg","assets/images/bg-pr.jpg","typings/common.ts","actions/auth.ts","constants/numberConstants.ts","actions/profile.ts","reducers/auth.ts","reducers/profile.ts","services/mappers.ts","reducers/rootReducer.ts","services/LocalStorage.ts","api/api.ts","epics/epics.ts","epics/auth.ts","epics/profile.ts","store/configureStore.tsx","components/LoginPage/LoginPage.tsx","containers/LoginPageContainer/LoginPageContainer.ts","components/RegistrationPage/RegistrationPage.tsx","containers/RegistrationPageContainer/RegistrationPageContainer.ts","components/TransactionsInfo/TransactionsInfo.tsx","containers/TransactionsInfoContainer/TransactionsInfoContainer.ts","components/TransactionModal/TransactionModal.tsx","containers/TransactionModalContainer/TransactionModalContainer.ts","components/ProfilePage/ProfilePage.tsx","containers/ProfilePageContainer/ProfilePageContainer.ts","components/App/App.tsx","containers/AppContainer/AppContainer.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","AuthPage","AuthField","TransactionsSortColumn","SortDirection","GO_TO_REGISTRATION_PAGE","GO_TO_LOGIN_PAGE","REGISTRATION","CHANGE_AUTH_FIELD","changeAuthField","field","value","type","USER_AUTH_SUCCESS","userAuthSuccess","idToken","USER_AUTH_FAILURE","userAuthFailure","errorText","LOGIN","ANIMATION_DURATION_AUTH_PAGE","MAX_USERNAME_LENGTH","FETCH_PROFILE_DATA","fetchProfileData","FETCH_PROFILE_DATA_SUCCESS","OPEN_TRANSACTION_MODAL","openTransactionModal","name","amount","CLOSE_TRANSACTION_MODAL","closeTransactionModal","CHANGE_TRANSACTION_NAME","UPDATE_SUGGESTED_USERS_LIST","CHANGE_TRANSACTION_AMOUNT","CREATE_TRANSACTION","LOGOUT","logout","CREATE_TRANSACTION_FAILURE","createTransactionFailure","CHANGE_SORT_OPTIONS","changeSortOptions","column","authReducer","state","arguments","length","undefined","authPageState","action","Object","objectSpread","page","credentials","username","email","password","rPassword","goToRegistrationPage","goToLoginPage","toUpperCase","newCredentials","USERNAME","EMAIL","PASSWORD","PASSWORD_REPEAT","setAuthErrorText","profileReducer","profileState","userInfo","transactionsInfo","sort","a","b","Date","date","getTime","isLoading","fetchProfileDataSuccess","transactionModalOpened","transactionModalData","suggestedUsersList","changeTransactionName","changeTransactionAmount","usersList","map","user","key","id","text","updateSuggestedUsersList","clickedColumn","sortColumn","sortDirection","_","ASC","newTransactionsInfo","toConsumableArray","reverse","DESC","balance","initialState","auth","profile","rootReducer","history","combineReducers","router","connectRouter","localStorage","setItem","valueFromStorage","getItem","removeItem","URL","request","fetch","concat","method","headers","Content-Type","body","JSON","stringify","then","res","ok","json","status","data","Error","fromPromise","tokenId","Authorization","filter","LocalStorage","getValue","combineEpics","action$","pipe","ofType","mergeMap","of","push","API","registration","id_token","setValue","catchError","error","message","login","forkJoin","getUserInfo","getTransactions","userInfoToken","user_info_token","trans_token","getFilteredUsersList","createTransaction","removeValue","createBrowserHistory","epicMiddleware","createEpicMiddleware","BLOCK","cn","LoginPage","loginFormVisible","loginButtonActive","getLoginForm","_this$state","_this","_this$props","props","openRegistrationPageClick","onChangeAuthField","react_default","createElement","Transition","visible","animation","duration","className","Form","Boolean","Field","htmlFor","Input","icon","iconPosition","required","placeholder","onChange","e","changeEmailField","target","onBlur","emailValidate","Button","color","onClick","loginButtonClick","disabled","Message","header","content","getTitle","Header_default","as","_this$props2","onLoginButtonClick","EmailValidator","setState","style","backgroundImage","background","backgroundSize","backgroundRepeat","this","Component","logitPageSelector","createSelector","connect","dispatch","RegistrationPage","registrationFormVisible","registrationButtonActive","getRegistrationForm","openLoginPageClick","isPasswordsEqual","onRegistrationButtonClick","registrationButtonClick","registrationPageSelector","registation","TransactionsInfo","getTableRow","transactionRow","Table","Row","positive","negative","Cell","Math","abs","getTableEmptyRow","getTable","sortDirectionCell","selectable","sortable","celled","compact","fixed","Header","HeaderCell","sorted","handleSort","Username","Amount","Body","row","changeSortType","Header_Header","transactionsInfoSelector","TransactionModal","dropdownRef","React","createRef","onConfirmButtonClick","onSelectTransactionName","_ref","_transactionModalData","Modal","open","closeOnDocumentClick","Content","Dropdown","fluid","search","selection","onSearchChange","searchQuery","options","bind","ref","Number","Actions","Icon","transactionModalSelector","ProfilePage","Dimmer","active","Loader","size","Container","TransactionsInfoContainer","TransactionModalContainer","profilePageSelector","App","goToProfilePage","token","esm","Fragment","react_router","exact","path","render","LoginPageContainer","RegistrationPageContainer","ProfilePageContainer","store","preloadedState","createStore","createRootReducer","composeWithDevTools","applyMiddleware","routerMiddleware","run","epics","configureStore","ReactDOM","es","AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.1169cf99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-start-o.17042cbc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg-pr.a427234a.jpg\";","export interface State {\n    auth: AuthPageState;\n    profile: Profile;\n}\n\nexport interface AuthPageState {\n    page: AuthPage,\n    credentials: UserAuth,\n    errorText?: string\n}\n\nexport enum AuthPage {\n    LOGIN = 'LOGIN',\n    REGISTRATION = 'REGISTRATION'\n}\n\nexport interface UserAuth {\n    email: string,\n    password: string,\n    rPassword?: string,\n    username?: string\n}\n\nexport enum AuthField {\n    EMAIL = 'EMAIL',\n    PASSWORD = 'PASSWORD',\n    PASSWORD_REPEAT = 'PASSWORD_REPEAT',\n    USERNAME = 'USERNAME'\n}\n\nexport interface UserInfo {\n    balance: number;\n    name: string;\n}\n\nexport interface TransactionModalData {\n    name: string;\n    amount: number;\n    suggestedUsersList: SuggestedUsersListClientFormat[];\n    errorText?: string;\n}\n\nexport interface Profile {\n    userInfo: UserInfo;\n    transactionsInfo: TransactionInfo[];\n    isLoading: boolean;\n    transactionModalOpened: boolean;\n    transactionModalData: TransactionModalData;\n    sortColumn: TransactionsSortColumn;\n    sortDirection: SortDirection;\n}\n\nexport interface TransactionInfo {\n    amount: number\n    balance: number\n    date: string\n    id: number\n    username: string;\n}\n\nexport enum TransactionsSortColumn {\n    Date = 'date',\n    Username = 'username',\n    Amount = 'amount',\n}\n\nexport enum SortDirection {\n    ASC = 'ASC',\n    DESC = 'DESC'\n}\n\nexport interface SuggestedUsersListApiFormat {\n    id: number;\n    name: string;\n}\n\nexport interface SuggestedUsersListClientFormat {\n    key: number;\n    value: string;\n    text: string;\n}\n","import { AuthField, UserAuth } from '../typings/common';\n\nexport const GO_TO_REGISTRATION_PAGE = 'GO_TO_REGISTRATION_PAGE';\ntype GO_TO_REGISTRATION_PAGE = typeof GO_TO_REGISTRATION_PAGE;\n\nexport interface GoToRegistrationPage {\n    type: GO_TO_REGISTRATION_PAGE;\n}\n\nexport function goToRegistrationPage(\n): GoToRegistrationPage {\n    return {\n        type: GO_TO_REGISTRATION_PAGE,\n    };\n}\n\nexport const GO_TO_LOGIN_PAGE = 'GO_TO_LOGIN_PAGE';\ntype GO_TO_LOGIN_PAGE = typeof GO_TO_LOGIN_PAGE;\n\nexport interface GoToLoginPage {\n    type: GO_TO_LOGIN_PAGE;\n}\n\nexport function goToLoginPage(\n): GoToLoginPage {\n    return {\n        type: GO_TO_LOGIN_PAGE,\n    };\n}\n\nexport const REGISTRATION = 'REGISTRATION';\ntype REGISTRATION = typeof REGISTRATION;\n\nexport interface Registration {\n    type: REGISTRATION;\n    credentials: UserAuth\n}\n\nexport function registation(\n    credentials: UserAuth\n): Registration {\n    return {\n        type: REGISTRATION,\n        credentials\n    };\n}\n\nexport const CHANGE_AUTH_FIELD = 'CHANGE_AUTH_FIELD';\ntype CHANGE_AUTH_FIELD = typeof CHANGE_AUTH_FIELD;\n\nexport interface ChangeAuthField {\n    type: CHANGE_AUTH_FIELD;\n    field: AuthField,\n    value: string\n}\n\nexport function changeAuthField(\n    field: AuthField,\n    value: string\n): ChangeAuthField {\n    return {\n        type: CHANGE_AUTH_FIELD,\n        field,\n        value\n    };\n}\n\nexport const USER_AUTH_SUCCESS = 'USER_AUTH_SUCCESS';\ntype USER_AUTH_SUCCESS = typeof USER_AUTH_SUCCESS;\n\nexport interface UserAuthSuccess {\n    type: USER_AUTH_SUCCESS;\n    idToken: string;\n}\n\nexport function userAuthSuccess(\n    idToken: string\n): UserAuthSuccess {\n    return {\n        type: USER_AUTH_SUCCESS,\n        idToken\n    };\n}\n\nexport const USER_AUTH_FAILURE = 'USER_AUTH_FAILURE';\ntype USER_AUTH_FAILURE = typeof USER_AUTH_FAILURE;\n\nexport interface UserAuthFailure {\n    type: USER_AUTH_FAILURE;\n    errorText: string;\n}\n\nexport function userAuthFailure(\n    errorText: string\n): UserAuthFailure {\n    return {\n        type: USER_AUTH_FAILURE,\n        errorText\n    };\n}\n\nexport const LOGIN = 'LOGIN';\ntype LOGIN = typeof LOGIN;\n\nexport interface Login {\n    type: LOGIN;\n    credentials: UserAuth;\n}\n\nexport function login(\n    credentials: UserAuth\n): Login {\n    return {\n        type: LOGIN,\n        credentials\n    };\n}\n","export const ANIMATION_DURATION_AUTH_PAGE = 1000;\nexport const MAX_USERNAME_LENGTH = 20;\n","import { TransactionInfo, TransactionsSortColumn, UserInfo } from '../typings/common';\n\nexport const FETCH_PROFILE_DATA = 'FETCH_PROFILE_DATA';\ntype FETCH_PROFILE_DATA = typeof FETCH_PROFILE_DATA;\n\nexport interface FetchProfileData {\n    type: FETCH_PROFILE_DATA;\n}\n\nexport function fetchProfileData(\n): FetchProfileData {\n    return {\n        type: FETCH_PROFILE_DATA,\n    };\n}\n\nexport const FETCH_PROFILE_DATA_SUCCESS = 'FETCH_PROFILE_DATA_SUCCESS';\ntype FETCH_PROFILE_DATA_SUCCESS = typeof FETCH_PROFILE_DATA_SUCCESS;\n\nexport interface FetchProfileDataSuccess {\n    type: FETCH_PROFILE_DATA_SUCCESS;\n    userInfo: UserInfo;\n    transactionsInfo: TransactionInfo[];\n}\n\nexport function fetchProfileDataSuccess(\n    userInfo: UserInfo,\n    transactionsInfo: TransactionInfo[]\n): FetchProfileDataSuccess {\n    return {\n        type: FETCH_PROFILE_DATA_SUCCESS,\n        userInfo,\n        transactionsInfo\n    };\n}\n\nexport const FETCH_PROFILE_DATA_FAILURE = 'FETCH_PROFILE_DATA_FAILURE';\ntype FETCH_PROFILE_DATA_FAILURE = typeof FETCH_PROFILE_DATA_FAILURE;\n\nexport interface FetchProfileDataFailure {\n    type: FETCH_PROFILE_DATA_FAILURE;\n}\n\nexport function fetchProfileDataFailure(\n): FetchProfileDataFailure {\n    return {\n        type: FETCH_PROFILE_DATA_FAILURE,\n    };\n}\n\nexport const OPEN_TRANSACTION_MODAL = 'OPEN_TRANSACTION_MODAL';\ntype OPEN_TRANSACTION_MODAL = typeof OPEN_TRANSACTION_MODAL;\n\nexport interface OpenTransactionModal {\n    type: OPEN_TRANSACTION_MODAL;\n    name?: string;\n    amount?: number;\n}\n\nexport function openTransactionModal(\n    name?: string,\n    amount?: number\n): OpenTransactionModal {\n    return {\n        type: OPEN_TRANSACTION_MODAL,\n        name,\n        amount\n    };\n}\n\nexport const CLOSE_TRANSACTION_MODAL = 'CLOSE_TRANSACTION_MODAL';\ntype CLOSE_TRANSACTION_MODAL = typeof CLOSE_TRANSACTION_MODAL;\n\nexport interface CloseTransactionModal {\n    type: CLOSE_TRANSACTION_MODAL;\n    name?: string;\n    amount?: number;\n}\n\nexport function closeTransactionModal(\n    name?: string,\n    amount?: number\n): CloseTransactionModal {\n    return {\n        type: CLOSE_TRANSACTION_MODAL,\n        name,\n        amount\n    };\n}\n\nexport const CHANGE_TRANSACTION_NAME = 'CHANGE_TRANSACTION_NAME';\ntype CHANGE_TRANSACTION_NAME = typeof CHANGE_TRANSACTION_NAME;\n\nexport interface ChangeTransactionName {\n    type: CHANGE_TRANSACTION_NAME;\n    name: string;\n}\n\nexport function changeTransactionName(\n    name: string,\n): ChangeTransactionName {\n    return {\n        type: CHANGE_TRANSACTION_NAME,\n        name\n    };\n}\n\nexport const UPDATE_SUGGESTED_USERS_LIST = 'UPDATE_SUGGESTED_USERS_LIST';\ntype UPDATE_SUGGESTED_USERS_LIST = typeof UPDATE_SUGGESTED_USERS_LIST;\n\nexport interface UpdateSuggestedUsersList {\n    type: UPDATE_SUGGESTED_USERS_LIST;\n    suggestedUsersList: []\n}\n\nexport function updateSuggestedUsersList(\n    suggestedUsersList: [],\n): UpdateSuggestedUsersList {\n    return {\n        type: UPDATE_SUGGESTED_USERS_LIST,\n        suggestedUsersList\n    };\n}\n\nexport const CHANGE_TRANSACTION_AMOUNT = 'CHANGE_TRANSACTION_AMOUNT';\ntype CHANGE_TRANSACTION_AMOUNT = typeof CHANGE_TRANSACTION_AMOUNT;\n\nexport interface ChangeTransactionAmount {\n    type: CHANGE_TRANSACTION_AMOUNT;\n    amount: number;\n}\n\nexport function changeTransactionAmount(\n    amount: number\n): ChangeTransactionAmount {\n    return {\n        type: CHANGE_TRANSACTION_AMOUNT,\n        amount\n    };\n}\n\nexport const CREATE_TRANSACTION = 'CREATE_TRANSACTION';\ntype CREATE_TRANSACTION = typeof CREATE_TRANSACTION;\n\nexport interface CreateTransaction {\n    type: CREATE_TRANSACTION;\n    name: string;\n    amount: number;\n}\n\nexport function createTransaction(\n    name: string,\n    amount: number\n): CreateTransaction {\n    return {\n        type: CREATE_TRANSACTION,\n        name,\n        amount\n    };\n}\n\nexport const LOGOUT = 'LOGOUT';\ntype LOGOUT = typeof LOGOUT;\n\nexport interface Logout {\n    type: LOGOUT;\n}\n\nexport function logout(\n): Logout {\n    return {\n        type: LOGOUT,\n    };\n}\n\nexport const CREATE_TRANSACTION_FAILURE = 'CREATE_TRANSACTION_FAILURE';\ntype CREATE_TRANSACTION_FAILURE = typeof CREATE_TRANSACTION_FAILURE;\n\nexport interface CreateTransactionFailure {\n    type: CREATE_TRANSACTION_FAILURE;\n    errorText: string;\n}\n\nexport function createTransactionFailure(\n    errorText: string\n): CreateTransactionFailure {\n    return {\n        type: CREATE_TRANSACTION_FAILURE,\n        errorText\n    };\n}\n\nexport const CHANGE_SORT_OPTIONS = 'CHANGE_SORT_OPTIONS';\ntype CHANGE_SORT_OPTIONS = typeof CHANGE_SORT_OPTIONS;\n\nexport interface ChangeSortOptions {\n    type: CHANGE_SORT_OPTIONS;\n    column: TransactionsSortColumn;\n}\n\nexport function changeSortOptions(\n    column: TransactionsSortColumn,\n): ChangeSortOptions {\n    return {\n        type: CHANGE_SORT_OPTIONS,\n        column,\n    };\n}\n","import { Reducer } from 'redux';\nimport {\n    AuthField, AuthPage, AuthPageState\n} from '../typings/common';\nimport { Action } from '../actions/actions';\nimport { authPageState } from './rootReducer';\nimport {\n    CHANGE_AUTH_FIELD,\n    ChangeAuthField,\n    GO_TO_LOGIN_PAGE,\n    GO_TO_REGISTRATION_PAGE,\n    GoToLoginPage,\n    GoToRegistrationPage,\n    USER_AUTH_FAILURE,\n    UserAuthFailure\n} from '../actions/auth';\nimport { MAX_USERNAME_LENGTH } from '../constants/numberConstants';\nimport { LOGOUT, Logout } from '../actions/profile';\n\nfunction goToRegistrationPage(\n    state: AuthPageState,\n    action: GoToRegistrationPage\n): AuthPageState {\n    return {\n        ...state,\n        page: AuthPage.REGISTRATION,\n        credentials: {\n            username: '',\n            email: '',\n            password: '',\n            rPassword: ''\n        },\n        errorText: ''\n    };\n}\n\nfunction goToLoginPage(\n    state: AuthPageState,\n    action: GoToLoginPage\n): AuthPageState {\n    return {\n        ...state,\n        page: AuthPage.LOGIN,\n        credentials: {\n            username: '',\n            email: '',\n            password: '',\n            rPassword: ''\n        },\n        errorText: ''\n    };\n}\n\nfunction logout(\n    state: AuthPageState,\n    action: Logout\n): AuthPageState {\n    return {\n        ...state,\n        errorText: ''\n    };\n}\n\nfunction changeAuthField(\n    state: AuthPageState,\n    action: ChangeAuthField\n): AuthPageState {\n    const field = action.field.toUpperCase();\n    const newCredentials = {\n        ...state.credentials\n    };\n\n    if (field === AuthField.USERNAME) {\n        if (\n            newCredentials.username\n            && newCredentials.username.length > MAX_USERNAME_LENGTH\n        ) {\n            return state;\n        }\n        newCredentials.username = action.value;\n    } else if (field === AuthField.EMAIL) {\n        newCredentials.email = action.value;\n    } else if (field === AuthField.PASSWORD) {\n        newCredentials.password = action.value;\n    } else if (field === AuthField.PASSWORD_REPEAT) {\n        newCredentials.rPassword = action.value;\n    }\n\n    return {\n        ...state,\n        credentials: {\n            ...newCredentials\n        }\n    };\n}\n\nfunction setAuthErrorText(\n    state: AuthPageState,\n    action: UserAuthFailure\n): AuthPageState {\n    return {\n        ...state,\n        errorText: action.errorText\n    };\n}\n\nexport const authReducer: Reducer<AuthPageState, Action> = (\n    state: AuthPageState = authPageState,\n    action: Action\n): AuthPageState => {\n    switch (action.type) {\n        case GO_TO_REGISTRATION_PAGE:\n            return goToRegistrationPage(state, action);\n        case GO_TO_LOGIN_PAGE:\n            return goToLoginPage(state, action);\n        case CHANGE_AUTH_FIELD:\n            return changeAuthField(state, action);\n        case USER_AUTH_FAILURE:\n            return setAuthErrorText(state, action);\n        case LOGOUT:\n            return logout(state, action);\n        default:\n            return state;\n    }\n};\n","import * as _ from 'lodash';\n\nimport { Reducer } from 'redux';\nimport {\n    CHANGE_SORT_OPTIONS,\n    CHANGE_TRANSACTION_AMOUNT,\n    CHANGE_TRANSACTION_NAME,\n    ChangeSortOptions,\n    ChangeTransactionAmount,\n    ChangeTransactionName,\n    CLOSE_TRANSACTION_MODAL,\n    CloseTransactionModal,\n    CREATE_TRANSACTION_FAILURE,\n    CreateTransactionFailure,\n    FETCH_PROFILE_DATA,\n    FETCH_PROFILE_DATA_SUCCESS,\n    FetchProfileData,\n    FetchProfileDataSuccess,\n    OPEN_TRANSACTION_MODAL,\n    OpenTransactionModal,\n    UPDATE_SUGGESTED_USERS_LIST,\n    UpdateSuggestedUsersList\n} from '../actions/profile';\nimport {\n    Profile, SortDirection, TransactionInfo\n} from '../typings/common';\nimport { Action } from '../actions/actions';\nimport { profileState } from './rootReducer';\nimport { mapSuggestedUsersList } from '../services/mappers';\n\nfunction fetchProfileDataSuccess(\n    state: Profile,\n    action: FetchProfileDataSuccess\n): Profile {\n    const { userInfo, transactionsInfo } = action;\n    transactionsInfo.sort(\n        (a: TransactionInfo, b: TransactionInfo) =>\n            new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n    return {\n        ...state,\n        userInfo,\n        transactionsInfo,\n        isLoading: false\n    };\n}\n\nfunction openTransactionModal(\n    state: Profile,\n    action: OpenTransactionModal\n): Profile {\n    return {\n        ...state,\n        transactionModalOpened: true,\n        transactionModalData: {\n            name: action.name || '',\n            amount: action.amount || 0,\n            suggestedUsersList: []\n        }\n    };\n}\n\nfunction closeTransactionModal(\n    state: Profile,\n    action: CloseTransactionModal\n): Profile {\n    return {\n        ...state,\n        transactionModalOpened: false\n    };\n}\n\nfunction changeTransactionAmount(\n    state: Profile,\n    action: ChangeTransactionAmount\n): Profile {\n    return {\n        ...state,\n        transactionModalData: {\n            ...state.transactionModalData,\n            amount: action.amount\n        }\n    };\n}\n\nfunction changeTransactionName(\n    state: Profile,\n    action: ChangeTransactionName\n): Profile {\n    return {\n        ...state,\n        transactionModalData: {\n            ...state.transactionModalData,\n            name: action.name\n        }\n    };\n}\n\nfunction updateSuggestedUsersList(\n    state: Profile,\n    action: UpdateSuggestedUsersList\n): Profile {\n    const { suggestedUsersList } = action;\n\n    return {\n        ...state,\n        transactionModalData: {\n            ...state.transactionModalData,\n            suggestedUsersList: mapSuggestedUsersList(suggestedUsersList)\n        }\n    };\n}\n\nfunction createTransactionFailure(\n    state: Profile,\n    action: CreateTransactionFailure\n): Profile {\n    return {\n        ...state,\n        transactionModalData: {\n            ...state.transactionModalData,\n            errorText: action.errorText\n        }\n    };\n}\n\nfunction fetchProfileData(\n    state: Profile,\n    action: FetchProfileData\n): Profile {\n    return {\n        ...state,\n        isLoading: true\n    };\n}\n\nfunction changeSortOptions(\n    state: Profile,\n    action: ChangeSortOptions\n): Profile {\n    const { column: clickedColumn } = action;\n    const { transactionsInfo, sortColumn, sortDirection } = state;\n\n    if (sortColumn !== clickedColumn) {\n        return {\n            ...state,\n            sortColumn: clickedColumn,\n            transactionsInfo: _.sortBy(transactionsInfo, [clickedColumn]),\n            sortDirection: SortDirection.ASC\n        };\n    }\n\n    const newTransactionsInfo = [...transactionsInfo].reverse();\n    return {\n        ...state,\n        transactionsInfo: newTransactionsInfo,\n        sortDirection: sortDirection === SortDirection.ASC\n            ? SortDirection.DESC\n            : SortDirection.ASC\n    };\n}\n\nexport const profileReducer: Reducer<Profile, Action> = (\n    state: Profile = profileState,\n    action: Action\n): Profile => {\n    switch (action.type) {\n        case FETCH_PROFILE_DATA_SUCCESS:\n            return fetchProfileDataSuccess(state, action);\n        case OPEN_TRANSACTION_MODAL:\n            return openTransactionModal(state, action);\n        case CLOSE_TRANSACTION_MODAL:\n            return closeTransactionModal(state, action);\n        case CHANGE_TRANSACTION_NAME:\n            return changeTransactionName(state, action);\n        case CHANGE_TRANSACTION_AMOUNT:\n            return changeTransactionAmount(state, action);\n        case UPDATE_SUGGESTED_USERS_LIST:\n            return updateSuggestedUsersList(state, action);\n        case CREATE_TRANSACTION_FAILURE:\n            return createTransactionFailure(state, action);\n        case FETCH_PROFILE_DATA:\n            return fetchProfileData(state, action);\n        case CHANGE_SORT_OPTIONS:\n            return changeSortOptions(state, action);\n        default:\n            return state;\n    }\n};\n","import {\n    SuggestedUsersListApiFormat,\n    SuggestedUsersListClientFormat,\n    UserInfo\n} from '../typings/common';\n\nexport function mapUserInfo(\n    userInfoToken: any\n): UserInfo {\n    return {\n        balance: userInfoToken.balance,\n        name: userInfoToken.name,\n    };\n}\n\nexport function mapSuggestedUsersList(\n    usersList: SuggestedUsersListApiFormat[]\n): SuggestedUsersListClientFormat[] {\n    return usersList.map(user => ({\n        key: user.id,\n        value: user.name,\n        text: user.name\n    }));\n}\n","import { combineReducers, ReducersMapObject } from 'redux';\nimport { History } from 'history';\nimport { connectRouter } from 'connected-react-router';\nimport {\n    AuthPage, AuthPageState, Profile, SortDirection, State, TransactionsSortColumn\n} from '../typings/common';\nimport { authReducer } from './auth';\nimport { profileReducer } from './profile';\n\nexport const authPageState: AuthPageState = {\n    page: AuthPage.LOGIN,\n    credentials: {\n        username: '',\n        email: '',\n        password: '',\n        rPassword: ''\n    }\n};\n\nexport const profileState: Profile = {\n    userInfo: {\n        name: '',\n        balance: 0\n    },\n    transactionsInfo: [],\n    isLoading: false,\n    transactionModalOpened: false,\n    transactionModalData: {\n        name: '',\n        amount: 0,\n        suggestedUsersList: []\n    },\n    sortColumn: TransactionsSortColumn.Date,\n    sortDirection: SortDirection.DESC\n};\n\nexport const initialState: State = {\n    auth: authPageState,\n    profile: profileState\n};\n\nexport type Reducers = ReducersMapObject<State>;\nexport type LoadedReducers = Partial<Reducers>;\n\nexport default (history: History) => combineReducers({\n    router: connectRouter(history),\n    auth: authReducer,\n    profile: profileReducer\n});\n","export default class {\n    static setValue(key: string, value: any) {\n        localStorage.setItem(key, value);\n    }\n\n    static getValue(key: any) {\n        const valueFromStorage = localStorage.getItem(key);\n        return valueFromStorage === null\n            ? null\n            : valueFromStorage;\n    }\n\n    static removeValue(key: any) {\n        localStorage.removeItem(key);\n    }\n}\n","import { fromPromise } from 'rxjs/internal-compatibility';\nimport { UserAuth } from '../typings/common';\nimport LocalStorage from '../services/LocalStorage';\n\nconst URL = 'http://193.124.114.46:3001';\n\nexport default class {\n    static registration(credentials: UserAuth) {\n        const request = fetch(`${URL}/users`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(credentials)\n        }).then(res => {\n            if (res.ok) {\n                return res.json()\n                    .then(json => ({ status: 'ok', data: json }));\n            }\n            return res.text().then(text => { throw Error(text); });\n        });\n\n        return fromPromise(request);\n    }\n\n    static login(credentials: UserAuth) {\n        const request = fetch(`${URL}/sessions/create`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(credentials)\n        }).then(res => {\n            if (res.ok) {\n                return res.json()\n                    .then(json => ({ status: 'ok', data: json }));\n            }\n            return res.text().then(text => { throw Error(text); });\n        });\n\n        return fromPromise(request);\n    }\n\n\n    static getTransactions(tokenId: string) {\n        const request = fetch(`${URL}/api/protected/transactions`, {\n            method: 'GET',\n            headers: {\n                Authorization: `Bearer ${tokenId}`,\n            },\n        }).then(res => {\n            if (res.ok) {\n                return res.json()\n                    .then(json => ({ status: 'ok', data: json }));\n            }\n            return res.text().then(text => { throw Error(text); });\n        });\n\n        return fromPromise(request);\n    }\n\n    static getUserInfo(tokenId: string) {\n        const request = fetch(`${URL}/api/protected/user-info`, {\n            method: 'GET',\n            headers: {\n                Authorization: `Bearer ${tokenId}`\n            }\n        }).then(res => {\n            if (res.ok) {\n                return res.json()\n                    .then(json => ({ status: 'ok', data: json }));\n            }\n            return res.text().then(text => { throw Error(text); });\n        });\n\n        return fromPromise(request);\n    }\n\n    static getFilteredUsersList(filter: string) {\n        const tokenId = LocalStorage.getValue('id_token');\n        const request = fetch(`${URL}/api/protected/users/list`, {\n            method: 'POST',\n            headers: {\n                Authorization: `Bearer ${tokenId}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                filter\n            })\n        }).then(res => {\n            if (res.ok) {\n                return res.json()\n                    .then(json => ({ status: 'ok', data: json }));\n            }\n            return res.text()\n                .then(text => { throw Error(text); });\n        });\n\n        return fromPromise(request);\n    }\n\n    static createTransaction(name: string, amount: number) {\n        const tokenId = LocalStorage.getValue('id_token');\n        const request = fetch(`${URL}/api/protected/transactions`, {\n            method: 'POST',\n            headers: {\n                Authorization: `Bearer ${tokenId}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name,\n                amount\n            })\n        }).then(res => {\n            if (res.ok) {\n                return res.json()\n                    .then(json => ({ status: 'ok', data: json }));\n            }\n            return res.text()\n                .then(text => {\n                    throw Error(text);\n                });\n        });\n\n        return fromPromise(request);\n    }\n}\n","import { combineEpics } from 'redux-observable';\nimport {\n    goToRegistrationPageEpic,\n    goToLoginPageEpic,\n    registrationEpic,\n    goToProfilePageEpic,\n    loginEpic\n} from './auth';\n\nimport {\n    fetchProfileDataEpic,\n    fetchFilteredUsersListEpic,\n    createTransactionEpic,\n    logoutEpic,\n    fetchProfileDataSuccessEpic\n} from './profile';\n\nexport default combineEpics(\n    goToRegistrationPageEpic,\n    goToLoginPageEpic,\n    registrationEpic,\n    goToProfilePageEpic,\n    loginEpic,\n    fetchProfileDataEpic,\n    fetchFilteredUsersListEpic,\n    createTransactionEpic,\n    logoutEpic,\n    fetchProfileDataSuccessEpic\n);\n","import { ActionsObservable, ofType } from 'redux-observable';\nimport {\n    mergeMap, map, catchError\n} from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { push } from 'connected-react-router';\nimport {\n    GO_TO_REGISTRATION_PAGE,\n    GO_TO_LOGIN_PAGE,\n    REGISTRATION,\n    userAuthSuccess,\n    userAuthFailure,\n    USER_AUTH_SUCCESS,\n    LOGIN,\n    GoToRegistrationPage,\n    GoToLoginPage,\n    UserAuthSuccess,\n    Registration,\n    Login\n} from '../actions/auth';\nimport API from '../api/api';\nimport LocalStorage from '../services/LocalStorage';\n\nexport const goToRegistrationPageEpic = (\n    action$: ActionsObservable<GoToRegistrationPage>\n) => action$.pipe(\n    ofType(GO_TO_REGISTRATION_PAGE),\n    mergeMap(action => of(push('/registration')))\n);\n\nexport const goToLoginPageEpic = (\n    action$: ActionsObservable<GoToLoginPage>\n) => action$.pipe(\n    ofType(GO_TO_LOGIN_PAGE),\n    mergeMap(action => of(push('/')))\n);\n\nexport const goToProfilePageEpic = (\n    action$: ActionsObservable<UserAuthSuccess>\n) => action$.pipe(\n    ofType(USER_AUTH_SUCCESS),\n    mergeMap(action => of(push('/profile')))\n);\n\nexport const registrationEpic = (\n    action$: ActionsObservable<Registration>\n) => action$.pipe(\n    ofType(REGISTRATION),\n    mergeMap((action: any) => API.registration(action.credentials).pipe(\n        map(res => {\n            const idToken = res.data.id_token;\n            LocalStorage.setValue('id_token', idToken);\n            return userAuthSuccess(idToken);\n        }),\n        catchError(error => of(userAuthFailure(error.message)))\n    )),\n);\n\nexport const loginEpic = (\n    action$: ActionsObservable<Login>\n) => action$.pipe(\n    ofType(LOGIN),\n    mergeMap((action: any) => API.login(action.credentials).pipe(\n        map(res => {\n            const idToken = res.data.id_token;\n            LocalStorage.setValue('id_token', idToken);\n            return userAuthSuccess(idToken);\n        }),\n        catchError(error => of(userAuthFailure(error.message)))\n    )),\n);\n","import { ActionsObservable, ofType } from 'redux-observable';\nimport {\n    catchError, map, mergeMap\n} from 'rxjs/operators';\nimport { of, forkJoin } from 'rxjs';\nimport { push } from 'connected-react-router';\nimport { userAuthFailure } from '../actions/auth';\nimport API from '../api/api';\nimport LocalStorage from '../services/LocalStorage';\nimport {\n    CHANGE_TRANSACTION_NAME,\n    ChangeTransactionName,\n    CREATE_TRANSACTION,\n    CreateTransaction,\n    FETCH_PROFILE_DATA,\n    fetchProfileData,\n    FetchProfileData,\n    fetchProfileDataSuccess,\n    updateSuggestedUsersList,\n    createTransactionFailure,\n    closeTransactionModal,\n    LOGOUT,\n    Logout,\n    logout,\n    FetchProfileDataSuccess,\n    FETCH_PROFILE_DATA_SUCCESS,\n    changeSortOptions\n} from '../actions/profile';\nimport { mapUserInfo } from '../services/mappers';\nimport { TransactionsSortColumn } from '../typings/common';\n\nexport const fetchProfileDataEpic = (\n    action$: ActionsObservable<FetchProfileData>\n) => action$.pipe(\n    ofType(FETCH_PROFILE_DATA),\n    mergeMap((action: FetchProfileData) => {\n        const tokenId = LocalStorage.getValue('id_token') || '';\n        return forkJoin(\n            API.getUserInfo(tokenId),\n            API.getTransactions(tokenId)\n        ).pipe(\n            map(res => {\n                const userInfo = mapUserInfo(res[0].data.user_info_token);\n                const transactionsInfo = res[1].data.trans_token;\n                return fetchProfileDataSuccess(userInfo, transactionsInfo);\n            }),\n            catchError(error => of(logout(), push('/'), userAuthFailure(error.message)))\n        );\n    }),\n);\n\nexport const fetchFilteredUsersListEpic = (\n    action$: ActionsObservable<ChangeTransactionName>\n) => action$.pipe(\n    ofType(CHANGE_TRANSACTION_NAME),\n    mergeMap((action: ChangeTransactionName) => API.getFilteredUsersList(action.name).pipe(\n        map(res => updateSuggestedUsersList(res.data)),\n        catchError(error => of(createTransactionFailure(error.message)))\n    )),\n);\n\nexport const createTransactionEpic = (\n    action$: ActionsObservable<CreateTransaction>\n) => action$.pipe(\n    ofType(CREATE_TRANSACTION),\n    mergeMap((action: CreateTransaction) => API.createTransaction(action.name, action.amount).pipe(\n        mergeMap(() => of(fetchProfileData(), closeTransactionModal())),\n        catchError(error => of(createTransactionFailure(error.message)))\n    )),\n);\n\nexport const logoutEpic = (\n    action$: ActionsObservable<Logout>\n) => action$.pipe(\n    ofType(LOGOUT),\n    mergeMap(action => {\n        LocalStorage.removeValue('id_token');\n        return of(push('/'));\n    })\n);\n\nexport const fetchProfileDataSuccessEpic = (\n    action$: ActionsObservable<FetchProfileDataSuccess>,\n) => action$.pipe(\n    ofType(FETCH_PROFILE_DATA_SUCCESS),\n    mergeMap(action => of(changeSortOptions(TransactionsSortColumn.Date)))\n);\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createEpicMiddleware } from 'redux-observable';\nimport createRootReducer from '../reducers/rootReducer';\nimport { State } from '../typings/common';\nimport epics from '../epics/epics';\n\nexport const history = createBrowserHistory();\n\nconst epicMiddleware = createEpicMiddleware();\n\nexport default function configureStore(preloadedState: State) {\n    const store = createStore(\n        createRootReducer(history),\n        preloadedState,\n        composeWithDevTools(\n            applyMiddleware(\n                routerMiddleware(history),\n                epicMiddleware\n            ),\n        ),\n    );\n\n    epicMiddleware.run(epics);\n\n    return store;\n}\n","import React, { Component } from 'react';\nimport './LoginPage.css';\nimport {\n    Button, Form, Transition, Message\n} from 'semantic-ui-react';\nimport { cn } from '@bem-react/classname';\nimport Header from 'semantic-ui-react/dist/commonjs/elements/Header';\nimport * as EmailValidator from 'email-validator';\nimport background from '../../assets/images/bg-start-o.jpg';\nimport { ANIMATION_DURATION_AUTH_PAGE } from '../../constants/numberConstants';\nimport { AuthField, UserAuth } from '../../typings/common';\n\nconst BLOCK = cn('LoginPage');\n\ninterface LoginPageProps {\n    openRegistrationPageClick: () => void;\n    password: string;\n    email: string;\n    onChangeAuthField: (field: AuthField, value: string) => void;\n    onLoginButtonClick: (credentials: UserAuth) => void;\n    errorText?: string;\n}\n\nclass LoginPage extends Component<LoginPageProps> {\n    state = {\n        loginFormVisible: false,\n        loginButtonActive: true\n    };\n\n    render() {\n        return (\n            <div\n                className={BLOCK()}\n                style={{\n                    backgroundImage: `url(${background})`,\n                    backgroundSize: 'cover',\n                    backgroundRepeat: 'no-repeat'\n                }}\n            >\n                {this.getTitle()}\n                {this.getLoginForm()}\n            </div>\n        );\n    }\n\n    componentDidMount(): void {\n        this.setState({\n            loginFormVisible: true\n        });\n    }\n\n    componentWillUnmount(): void {\n        this.setState({\n            loginFormVisible: false\n        });\n    }\n\n    private getLoginForm = () => {\n        const { loginFormVisible, loginButtonActive } = this.state;\n        const {\n            openRegistrationPageClick, onChangeAuthField, email, errorText\n        } = this.props;\n        return (\n            <Transition visible={loginFormVisible} animation=\"fade\" duration={ANIMATION_DURATION_AUTH_PAGE}>\n                <div className={BLOCK('Form')}>\n                    <Form error={Boolean(errorText)}>\n                        <Form.Field>\n                            <label htmlFor=\"email-input\">E-mail</label>\n                            <Form.Input\n                                icon=\"mail\"\n                                iconPosition=\"left\"\n                                required\n                                id=\"email-input\"\n                                type=\"email\"\n                                placeholder=\"Enter e-mail\"\n                                onChange={\n                                    e => this.changeEmailField(AuthField.EMAIL, e.target.value)\n                                }\n                                onBlur={this.emailValidate}\n                                error={!loginButtonActive}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Password</label>\n                            <Form.Input\n                                icon=\"lock\"\n                                iconPosition=\"left\"\n                                type=\"password\"\n                                placeholder=\"Enter password\"\n                                onChange={\n                                    e => onChangeAuthField(AuthField.PASSWORD, e.target.value)\n                                }\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <Button\n                                type=\"submit\"\n                                color=\"instagram\"\n                                onClick={this.loginButtonClick}\n                                disabled={!loginButtonActive}\n                            >\n                                Let me in!\n                            </Button>\n                        </Form.Field>\n                        <Form.Field>\n                            <div className={BLOCK('Actions')}>\n                                <div className={BLOCK('RegistrationInfo')}>\n                                    <span>Don&apos;t have an account?</span>\n                                    <a\n                                        className={BLOCK('OpenRegistrationBtn')}\n                                        onClick={openRegistrationPageClick}\n                                    >\n                                        Sign up\n                                    </a>\n                                </div>\n                            </div>\n                        </Form.Field>\n                        <Message\n                            error\n                            header=\"Authorisation Error\"\n                            content={errorText}\n                        />\n                    </Form>\n                </div>\n            </Transition>\n        );\n    };\n\n    private getTitle = () => {\n        const { loginFormVisible } = this.state;\n\n        return (\n            <Transition visible={loginFormVisible} animation=\"fade\" duration={1000}>\n                <div className={BLOCK('Title')}>\n                    <Header as=\"h1\">Welcome to Parrot Wings!</Header>\n                </div>\n            </Transition>\n        );\n    };\n\n    private loginButtonClick = () => {\n        const {\n            email,\n            password,\n            onLoginButtonClick\n        } = this.props;\n\n        onLoginButtonClick({\n            email,\n            password\n        });\n    };\n\n    private emailValidate = () => {\n        const { email } = this.props;\n        if (!EmailValidator.validate(email)) {\n            this.setState({\n                loginButtonActive: false\n            });\n        } else {\n            this.setState({\n                loginButtonActive: true\n            });\n        }\n    };\n\n    private changeEmailField = (field: AuthField, value: string) => {\n        const { onChangeAuthField } = this.props;\n        this.setState({\n            loginButtonActive: true\n        });\n        onChangeAuthField(field, value);\n    };\n}\n\nexport default LoginPage;\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { AuthField, State, UserAuth } from '../../typings/common';\nimport LoginPage from '../../components/LoginPage/LoginPage';\nimport { changeAuthField, goToRegistrationPage, login } from '../../actions/auth';\n\nconst logitPageSelector = createSelector(\n    (state: State): string => state.auth.credentials.email,\n    (state: State): string => state.auth.credentials.password,\n    (state: State): string | undefined => state.auth.errorText,\n    (email, password, errorText) => ({\n        email,\n        password,\n        errorText\n    })\n);\n\nconst mapStateToProps = (\n    state: State\n) => ({\n    ...logitPageSelector(state)\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch\n) => ({\n    openRegistrationPageClick: () => dispatch(goToRegistrationPage()),\n    onChangeAuthField: (field: AuthField, value: string) => dispatch(changeAuthField(field, value)),\n    onLoginButtonClick: (credentials: UserAuth) => dispatch(login(credentials))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoginPage);\n","import React, { Component } from 'react';\nimport './RegistrationPage.css';\nimport {\n    Button, Form, Message, Transition\n} from 'semantic-ui-react';\nimport { cn } from '@bem-react/classname';\nimport Header from 'semantic-ui-react/dist/commonjs/elements/Header';\nimport * as EmailValidator from 'email-validator';\nimport background from '../../assets/images/bg-start-o.jpg';\nimport { ANIMATION_DURATION_AUTH_PAGE } from '../../constants/numberConstants';\nimport { AuthField, UserAuth } from '../../typings/common';\n\nconst BLOCK = cn('RegistrationPage');\n\nexport interface RegistrationPageProps {\n    openLoginPageClick: () => void;\n    registrationButtonClick: (credentials: UserAuth) => void;\n    onChangeAuthField: (field: AuthField, value: string) => void;\n    username?: string;\n    password: string;\n    rPassword?: string;\n    email: string;\n    errorText?: string;\n}\n\nclass RegistrationPage extends Component<RegistrationPageProps> {\n    state = {\n        registrationFormVisible: false,\n        registrationButtonActive: true\n    };\n\n    render() {\n        return (\n            <div\n                className={BLOCK()}\n                style={{\n                    backgroundImage: `url(${background})`,\n                    backgroundSize: 'cover',\n                    backgroundRepeat: 'no-repeat'\n                }}\n            >\n                {this.getTitle()}\n                {this.getRegistrationForm()}\n            </div>\n        );\n    }\n\n    componentDidMount(): void {\n        this.setState({\n            registrationFormVisible: true\n        });\n    }\n\n    componentWillUnmount(): void {\n        this.setState({\n            registrationFormVisible: false\n        });\n    }\n\n    private getRegistrationForm = () => {\n        const { registrationFormVisible, registrationButtonActive } = this.state;\n        const {\n            openLoginPageClick,\n            onChangeAuthField,\n            errorText,\n            password,\n            rPassword,\n            username,\n            email,\n        } = this.props;\n\n        const isPasswordsEqual = rPassword === password;\n        return (\n            <Transition visible={registrationFormVisible} animation=\"fade\" duration={ANIMATION_DURATION_AUTH_PAGE}>\n                <div className={BLOCK('Form')}>\n                    <Form error={Boolean(errorText)}>\n                        <Form.Field>\n                            <label htmlFor=\"email-input\">E-mail</label>\n                            <Form.Input\n                                id=\"email-input\"\n                                type=\"email\"\n                                icon=\"mail\"\n                                iconPosition=\"left\"\n                                placeholder=\"Enter e-mail\"\n                                onChange={\n                                    e => this.changeEmailField(AuthField.EMAIL, e.target.value)\n                                }\n                                onBlur={() => this.emailValidate()}\n                                error={!registrationButtonActive}\n                                value={email}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Username</label>\n                            <Form.Input\n                                icon=\"user\"\n                                iconPosition=\"left\"\n                                type=\"text\"\n                                placeholder=\"Enter username\"\n                                onChange={e => onChangeAuthField(\n                                    AuthField.USERNAME,\n                                    e.target.value\n                                )}\n                                value={username}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Password</label>\n                            <Form.Input\n                                icon=\"lock\"\n                                iconPosition=\"left\"\n                                type=\"password\"\n                                placeholder=\"Enter password\"\n                                onChange={e => onChangeAuthField(\n                                    AuthField.PASSWORD,\n                                    e.target.value\n                                )}\n                                error={!isPasswordsEqual}\n                                value={password}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Repeat password</label>\n                            <Form.Input\n                                icon=\"lock\"\n                                iconPosition=\"left\"\n                                type=\"password\"\n                                placeholder=\"Enter password\"\n                                onChange={e => onChangeAuthField(\n                                    AuthField.PASSWORD_REPEAT,\n                                    e.target.value\n                                )}\n                                error={!isPasswordsEqual}\n                                value={rPassword}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <div className={BLOCK('SignUpButton')}>\n                                <Button\n                                    type=\"submit\"\n                                    color=\"instagram\"\n                                    onClick={this.onRegistrationButtonClick}\n                                    disabled={!registrationButtonActive || !isPasswordsEqual}\n                                >\n                                    Sign up and login\n                                </Button>\n                            </div>\n                        </Form.Field>\n                        <Form.Field>\n                            <div className={BLOCK('Actions')}>\n                                <div className={BLOCK('RegistrationInfo')}>\n                                    <span>Already signed up?</span>\n                                    <a\n                                        className={BLOCK('OpenRegistrationBtn')}\n                                        onClick={openLoginPageClick}\n                                    >\n                                        Sign in\n                                    </a>\n                                </div>\n                            </div>\n                        </Form.Field>\n                        <Message\n                            error\n                            header=\"Registration Error\"\n                            content={errorText}\n                        />\n                    </Form>\n                </div>\n            </Transition>\n        );\n    };\n\n    private getTitle = () => {\n        const { registrationFormVisible } = this.state;\n\n        return (\n            <Transition visible={registrationFormVisible} animation=\"fade\" duration={1000}>\n                <div className={BLOCK('Title')}>\n                    <Header as=\"h1\">Join us!</Header>\n                </div>\n            </Transition>\n\n        );\n    };\n\n    private onRegistrationButtonClick = () => {\n        const {\n            email,\n            password,\n            username,\n            registrationButtonClick\n        } = this.props;\n\n        registrationButtonClick({\n            email,\n            password,\n            username\n        });\n    };\n\n    private emailValidate = () => {\n        const { email } = this.props;\n        if (!EmailValidator.validate(email)) {\n            this.setState({\n                registrationButtonActive: false\n            });\n        } else {\n            this.setState({\n                registrationButtonActive: true\n            });\n        }\n    };\n\n    private changeEmailField = (field: AuthField, value: string) => {\n        const { onChangeAuthField } = this.props;\n        this.setState({\n            registrationButtonActive: true\n        });\n        onChangeAuthField(field, value);\n    };\n}\n\nexport default RegistrationPage;\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { AuthField, State, UserAuth } from '../../typings/common';\nimport { goToLoginPage, registation, changeAuthField } from '../../actions/auth';\nimport RegistrationPage, { RegistrationPageProps } from '../../components/RegistrationPage/RegistrationPage';\n\nconst registrationPageSelector = createSelector(\n    (state: State): string | undefined => state.auth.credentials.username,\n    (state: State): string => state.auth.credentials.email,\n    (state: State): string => state.auth.credentials.password,\n    (state: State): string | undefined => state.auth.credentials.rPassword,\n    (state: State): string | undefined => state.auth.errorText,\n    (username, email, password, rPassword, errorText) => ({\n        username,\n        email,\n        password,\n        rPassword,\n        errorText\n    })\n);\n\nconst mapStateToProps = (\n    state: State\n) => ({\n    ...registrationPageSelector(state)\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch\n) => ({\n    openLoginPageClick: () => dispatch(goToLoginPage()),\n    registrationButtonClick: (credentials: UserAuth) => dispatch(registation(credentials)),\n    onChangeAuthField: (field: AuthField, value: string) => dispatch(changeAuthField(field, value))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(RegistrationPage);\n","import React, { Component } from 'react';\nimport './TransactionsInfo.css';\nimport { cn } from '@bem-react/classname';\nimport { Button, Table, Header } from 'semantic-ui-react';\nimport { SortDirection, TransactionInfo, TransactionsSortColumn } from '../../typings/common';\n\nconst BLOCK = cn('TransactionsInfo');\n\ninterface TransactionsInfoProps {\n    transactionsInfo: TransactionInfo[];\n    openTransactionModal: (name: string, amount: number) => void;\n    changeSortType: (column : TransactionsSortColumn) => void;\n    sortDirection: SortDirection;\n    sortColumn: TransactionsSortColumn;\n}\n\nclass TransactionsInfo extends Component<TransactionsInfoProps> {\n    render() {\n        return (\n            <div\n                className={BLOCK()}\n            >\n                <Header as=\"h2\" className={BLOCK('Title')}>\n                    Transactions history\n                </Header>\n                {this.getTable()}\n            </div>\n        );\n    }\n\n    private getTableRow = (transactionRow: TransactionInfo) => {\n        const {\n            id,\n            balance,\n            amount,\n            date,\n            username\n        } = transactionRow;\n\n        const { openTransactionModal } = this.props;\n\n        return (\n            <Table.Row key={id} positive={amount > 0} negative={amount < 0}>\n                <Table.Cell>{date}</Table.Cell>\n                <Table.Cell>{username}</Table.Cell>\n                <Table.Cell>{amount} PW</Table.Cell>\n                <Table.Cell>{balance} PW</Table.Cell>\n                <Table.Cell>\n                    <Button\n                        color=\"green\"\n                        onClick={() => openTransactionModal(username, Math.abs(amount))}\n                    >\n                        Use as template\n                    </Button>\n                </Table.Cell>\n            </Table.Row>\n        );\n    };\n\n    private getTableEmptyRow = () => (\n        <Table.Row>\n            <Table.Cell>No transactions</Table.Cell>\n        </Table.Row>\n    );\n\n    private getTable = () => {\n        const { transactionsInfo, sortDirection, sortColumn } = this.props;\n        const sortDirectionCell = sortDirection === SortDirection.ASC ? 'ascending' : 'descending';\n        return (\n            <div className={BLOCK('Table')}>\n                <Table selectable sortable celled compact fixed>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell\n                                sorted={sortColumn === TransactionsSortColumn.Date\n                                    ? sortDirectionCell\n                                    : undefined}\n                                onClick={() => this.handleSort(TransactionsSortColumn.Date)}\n                            >\n                                Date/Time of the transaction\n                            </Table.HeaderCell>\n                            <Table.HeaderCell\n                                sorted={sortColumn === TransactionsSortColumn.Username\n                                    ? sortDirectionCell\n                                    : undefined}\n                                onClick={() => this.handleSort(TransactionsSortColumn.Username)}\n                            >\n                                Correspondent name\n                            </Table.HeaderCell>\n                            <Table.HeaderCell\n                                sorted={sortColumn === TransactionsSortColumn.Amount\n                                    ? sortDirectionCell\n                                    : undefined}\n                                onClick={() => this.handleSort(TransactionsSortColumn.Amount)}\n                            >\n                                Transaction amount\n                            </Table.HeaderCell>\n                            <Table.HeaderCell>Resulting balance</Table.HeaderCell>\n                            <Table.HeaderCell>Actions</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                        {transactionsInfo.length === 0\n                            ? this.getTableEmptyRow()\n                            : transactionsInfo.map(row => this.getTableRow(row))}\n                    </Table.Body>\n                </Table>\n            </div>\n\n        );\n    };\n\n    private handleSort = (clickedColumn: TransactionsSortColumn) => {\n        const { changeSortType } = this.props;\n        changeSortType(clickedColumn);\n    };\n}\n\nexport default TransactionsInfo;\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport {\n    SortDirection,\n    State,\n    TransactionInfo,\n    TransactionsSortColumn,\n} from '../../typings/common';\nimport {\n    openTransactionModal,\n    changeSortOptions\n} from '../../actions/profile';\nimport TransactionsInfo from '../../components/TransactionsInfo/TransactionsInfo';\n\nconst transactionsInfoSelector = createSelector(\n    (state: State): TransactionInfo[] => state.profile.transactionsInfo,\n    (state: State): SortDirection => state.profile.sortDirection,\n    (state: State): TransactionsSortColumn => state.profile.sortColumn,\n    (\n        transactionsInfo,\n        sortDirection,\n        sortColumn\n    ) => ({\n        transactionsInfo,\n        sortDirection,\n        sortColumn\n    })\n);\n\nconst mapStateToProps = (\n    state: State\n) => ({\n    ...transactionsInfoSelector(state)\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch\n) => ({\n    openTransactionModal:\n        (name?: string, amount?: number) => dispatch(openTransactionModal(name, amount)),\n    changeSortType: (column : TransactionsSortColumn) => dispatch(changeSortOptions(column))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TransactionsInfo);\n","import React, { Component, RefObject } from 'react';\nimport './TransactionModal.css';\nimport { cn } from '@bem-react/classname';\nimport {\n    Modal, Button, Header, Icon, Input, Form, Dropdown, DropdownProps, Message\n} from 'semantic-ui-react';\nimport { TransactionModalData } from '../../typings/common';\n\nconst BLOCK = cn('TransactionModal');\n\ninterface TransactionModalProps {\n    transactionModalOpened: boolean;\n    closeTransactionModal: () => void;\n    transactionModalData: TransactionModalData;\n    changeTransactionName: (name: string) => void;\n    changeTransactionAmount: (amount: number) => void;\n    createTransaction: (name: string, amount: number) => void;\n}\n\nclass TransactionModal extends Component<TransactionModalProps> {\n    private dropdownRef: RefObject<Component<DropdownProps, any, any>> = React.createRef();\n\n    render() {\n        const {\n            transactionModalOpened,\n            closeTransactionModal,\n            transactionModalData,\n            changeTransactionName,\n            changeTransactionAmount,\n            createTransaction\n        } = this.props;\n        const {\n            name, amount, suggestedUsersList, errorText = ''\n        } = transactionModalData;\n\n        return (\n            <div\n                className={BLOCK()}\n            >\n                <Modal open={transactionModalOpened} closeOnDocumentClick>\n                    <Header icon=\"money\" content=\"Create new transaction\" />\n                    <Modal.Content>\n                        <Form error={Boolean(errorText)}>\n                            <Form.Field>\n                                <label htmlFor=\"dropdown\">Name</label>\n                                <Dropdown\n                                    id=\"dropdown\"\n                                    placeholder=\"Write name and select user\"\n                                    fluid\n                                    search\n                                    selection\n                                    onSearchChange={\n                                        (e, value) => changeTransactionName(value.searchQuery)\n                                    }\n                                    options={suggestedUsersList}\n                                    onChange={this.onSelectTransactionName.bind(this)}\n                                    ref={this.dropdownRef}\n                                    text={name}\n                                />\n                            </Form.Field>\n                            <Form.Field>\n                                <label htmlFor=\"email-input\">Amount</label>\n                                <Form.Input\n                                    value={amount || ''}\n                                    placeholder=\"Amount\"\n                                    type=\"number\"\n                                    onChange={e => changeTransactionAmount(Number(e.target.value))}\n                                />\n                            </Form.Field>\n                            <Message\n                                error\n                                header=\"Transaction error\"\n                                content={errorText}\n                            />\n                        </Form>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button color=\"red\" onClick={closeTransactionModal}>\n                            <Icon name=\"remove\" />\n                            Cancel\n                        </Button>\n                        <Button\n                            color=\"green\"\n                            onClick={this.onConfirmButtonClick}\n                        >\n                            <Icon name=\"checkmark\" />\n                            Confirm\n                        </Button>\n                    </Modal.Actions>\n                </Modal>\n            </div>\n        );\n    }\n\n\n    private onConfirmButtonClick = () => {\n        const { createTransaction, transactionModalData } = this.props;\n        const { name, amount } = transactionModalData;\n        createTransaction(name, amount);\n    };\n\n    private onSelectTransactionName = (e: any, { value } : any) => {\n        const { changeTransactionName } = this.props;\n        changeTransactionName(value);\n    };\n}\n\nexport default TransactionModal;\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport {\n    State,\n    TransactionModalData\n} from '../../typings/common';\nimport {\n    closeTransactionModal,\n    changeTransactionName,\n    changeTransactionAmount,\n    createTransaction\n} from '../../actions/profile';\nimport TransactionModal from '../../components/TransactionModal/TransactionModal';\n\nconst transactionModalSelector = createSelector(\n    (state: State): boolean => state.profile.transactionModalOpened,\n    (state: State): TransactionModalData => state.profile.transactionModalData,\n    (\n        transactionModalOpened,\n        transactionModalData\n    ) => ({\n        transactionModalOpened,\n        transactionModalData\n    })\n);\n\nconst mapStateToProps = (\n    state: State\n) => ({\n    ...transactionModalSelector(state)\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch\n) => ({\n    closeTransactionModal: () => dispatch(closeTransactionModal()),\n    changeTransactionName: (name: string) => dispatch(changeTransactionName(name)),\n    changeTransactionAmount: (amount: number) => dispatch(changeTransactionAmount(amount)),\n    createTransaction: (name: string, amount: number) => dispatch(createTransaction(name, amount))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TransactionModal);\n","import React, { Component } from 'react';\nimport './ProfilePage.css';\nimport { cn } from '@bem-react/classname';\nimport {\n    Container,\n    Icon,\n    Dimmer,\n    Loader\n} from 'semantic-ui-react';\nimport {\n    TransactionInfo,\n    UserInfo\n} from '../../typings/common';\nimport TransactionsInfoCointainer from '../../containers/TransactionsInfoContainer/TransactionsInfoContainer';\nimport TransactionModalContainer from '../../containers/TransactionModalContainer/TransactionModalContainer';\nimport background from '../../assets/images/bg-pr.jpg';\n\nconst BLOCK = cn('ProfilePage');\n\ninterface ProfilePageProps {\n    fetchProfileData: () => void;\n    isLoading: boolean;\n    userInfo: UserInfo;\n    transactionsInfo: TransactionInfo[];\n    openTransactionModal: (name?: string, amount?: number) => void;\n    logout: () => void;\n}\n\nclass ProfilePage extends Component<ProfilePageProps> {\n    componentDidMount(): void {\n        const { fetchProfileData } = this.props;\n        fetchProfileData();\n    }\n\n    render() {\n        const {\n            isLoading,\n        } = this.props;\n\n        return (\n            <div\n                className={BLOCK()}\n            >\n                <Dimmer active={isLoading}>\n                    <Loader size=\"massive\">Loading</Loader>\n                </Dimmer>\n                {!isLoading && (\n                    <div\n                        className={BLOCK('Container')}\n                        style={{\n                            backgroundImage: `url(${background})`,\n                            backgroundSize: 'cover',\n                            backgroundRepeat: 'no-repeat'\n                        }}\n                    >\n                        <Container>\n                            {this.getUserInfo()}\n                            <TransactionsInfoCointainer />\n                            <TransactionModalContainer />\n                        </Container>\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    private getUserInfo = () => {\n        const {\n            userInfo, openTransactionModal, logout, fetchProfileData\n        } = this.props;\n        const {\n            name,\n            balance\n        } = userInfo;\n        return (\n            <div className={BLOCK('UserInfo')}>\n                <div className={BLOCK('Name')}>Name: <span className={BLOCK('NameValue')}>{name}</span></div>\n                <div className={BLOCK('Balance')}>Balance: <span className={BLOCK('BalanceValue')}>{balance}</span> PW</div>\n                <div className={BLOCK('SendButton')}>\n                    <a onClick={() => openTransactionModal()}>\n                        <Icon name=\"btc\" />\n                        <span>Create transaction</span>\n                    </a>\n                </div>\n                <div className={BLOCK('SendButton')}>\n                    <a onClick={() => fetchProfileData()}>\n                        <Icon name=\"sync\" />\n                        <span>Update info</span>\n                    </a>\n                </div>\n                <div className={BLOCK('Logout')}>\n                    <a onClick={logout} className={BLOCK('LogoutElement')}>\n                        <Icon name=\"power off\" />\n                        <span>Logout</span>\n                    </a>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default ProfilePage;\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport {\n    State,\n    TransactionInfo,\n    UserInfo,\n} from '../../typings/common';\nimport ProfilePage from '../../components/ProfilePage/ProfilePage';\nimport {\n    fetchProfileData,\n    openTransactionModal,\n    logout\n} from '../../actions/profile';\n\nconst profilePageSelector = createSelector(\n    (state: State): boolean => state.profile.isLoading,\n    (state: State): UserInfo => state.profile.userInfo,\n    (state: State): TransactionInfo[] => state.profile.transactionsInfo,\n    (\n        isLoading,\n        userInfo,\n        transactionsInfo\n    ) => ({\n        isLoading,\n        userInfo,\n        transactionsInfo\n    })\n);\n\nconst mapStateToProps = (\n    state: State\n) => ({\n    ...profilePageSelector(state)\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch\n) => ({\n    fetchProfileData: () => dispatch(fetchProfileData()),\n    openTransactionModal:\n        (name?: string, amount?: number) => dispatch(openTransactionModal(name, amount)),\n    logout: () => dispatch(logout())\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProfilePage);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { cn } from '@bem-react/classname';\nimport { Header } from 'semantic-ui-react';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Route, Switch } from 'react-router';\nimport { history } from '../../store/configureStore';\nimport LoginPageContainer from '../../containers/LoginPageContainer/LoginPageContainer';\nimport RegistrationPageContainer from '../../containers/RegistrationPageContainer/RegistrationPageContainer';\nimport ProfilePageContainer from '../../containers/ProfilePageContainer/ProfilePageContainer';\nimport LocalStorage from '../../services/LocalStorage';\n\nconst BLOCK = cn('App');\n\ninterface AppProps {\n    goToProfilePage: (idToken: string) => void;\n}\n\nclass App extends Component<AppProps> {\n    componentDidMount(): void {\n        const { goToProfilePage } = this.props;\n        const token = LocalStorage.getValue('id_token');\n        if (token) {\n            goToProfilePage(token);\n        }\n    }\n\n    render() {\n        return (\n            <div className={BLOCK()}>\n                <ConnectedRouter history={history}>\n                    <>\n                        <Switch>\n                            <Route exact path=\"/\" render={() => <LoginPageContainer />} />\n                            <Route exact path=\"/registration\" render={() => <RegistrationPageContainer />} />\n                            <Route exact path=\"/profile\" render={() => <ProfilePageContainer />} />\n                        </Switch>\n                    </>\n                </ConnectedRouter>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport App from '../../components/App/App';\nimport { userAuthSuccess } from '../../actions/auth';\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch\n) => ({\n    goToProfilePage: (idToken: string) => dispatch(userAuthSuccess(idToken))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport AppContainer from './containers/AppContainer/AppContainer';\nimport configureStore from './store/configureStore';\nimport { initialState } from './reducers/rootReducer';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst store = configureStore(initialState);\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppContainer />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}